/* ****************************************************************************************
 * Project      : Tenneco LF - Applicativo
 * ****************************************************************************************
 * File Name    : lin_pdu_protocol.h
 * Description  : Protocollo Packet Data Unit (PDU) ovvero il transport layer frame
 *                su LIN per la lettura / scrittura di dati.
 * Note         :
 * **************************************************************************************** */
#ifndef LIN_PDU_PROTOCOL_H
#define LIN_PDU_PROTOCOL_H


/* ---------------------------------------------------------------------------------------- */
/*  1.  INCLUDE FILES                                                                       */
/* ---------------------------------------------------------------------------------------- */
#include "defines.h"


/* ---------------------------------------------------------------------------------------- */
/*  2.  PUBLIC MACROS ('define')                                                            */
/* ---------------------------------------------------------------------------------------- */
// Identificativo SUPPLIER_ID per protocollo LIN -> identificatico del produttore
#define SUPPLIER_ID                 (0xEDCB)    // valore dummy

// Identificativo FUNCTION_ID per protocollo LIN -> identificativo del prodotto e delle sue funzionalitÃ 
#define FUNCTION_ID                 (0x0001)    // valore dummy


// Tipi di indirizzo NAD (NODE ADDRESS)
#define NODE_ADDRESS__NOT_SUPPORTED                     (0x00)
#define NODE_ADDRESS__MIN_VALUE                         (0x01)
#define NODE_ADDRESS__MAX_VALUE                         (0x08)
#define NODE_ADDRESS__BROADCAST                         (0x09)

// valore di default dell'indirizzo NAD del nodo slave
#define NODE_ADDRESS__DEFAULT                           (NODE_ADDRESS__NOT_SUPPORTED)

#define SN_BYTE_LSB__                                   (0x01)
#define SN_BYTE_MSB__                                   (0x02)


/* ---------------------------------------------------------------------------------------- */
/*  3.  PUBLIC TYPE DEFINITIONS ('typedef')                                                 */
/* ---------------------------------------------------------------------------------------- */
// *** ID dei parametri (in memoria non volatile) usati nel controllo del full_bridge ***
// NB: se il numero dei parametri supera la soglia di 16 bisogna cambiare la variabile che tiene
// conto di quali devono essere memorizzati in flash --> lin_params_to_store_flags
typedef enum LIN_PARAM_en {
    LIN_PARAM__NAD,
            
    LIN_PARAM__NUM
} t_LIN_PARAM_en;


/* ---------------------------------------------------------------------------------------- */
/*  4.  PUBLIC CONSTANTS ('extern', definition in C source)                                 */
/* ---------------------------------------------------------------------------------------- */
//

/* ---------------------------------------------------------------------------------------- */
/*  5.  PUBLIC VARIABLES ('extern', definition in C source)                                 */
/* ---------------------------------------------------------------------------------------- */
// richieste di salvataggio dei parametri per il controllo della LIN
// bitmask: 1<<LIN_PARAM__xxx := parametro xxx da salvare in memoria non volatile
// NB: se il numero dei parametri supera la soglia di 16 bisogna cambiare la variabile che tiene
// conto di quali devono essere memorizzati in flash
extern uint16_t lin_params_to_store_flags;
// utility per lin_params_to_store_flags -- utilizzare con "param_id"=LIN_PARAM__xxx
#define LIN_PARAM_set_request_to_store(param_id)        { lin_params_to_store_flags |=   (1U<<(param_id)) ; }
#define LIN_PARAM_reset_request_to_store(param_id)      { lin_params_to_store_flags &= (~(1U<<(param_id))); }
#define LIN_PARAM_is_param_to_store(param_id)           ((lin_params_to_store_flags & (1U<<(param_id))) != 0U)
#define LIN_PARAM_is_any_param_to_store()               ( lin_params_to_store_flags != 0U )


// richieste di salvataggio dei parametri di EOL
extern uint8_t eol_params_to_store_flags;
// utility per eol_params_to_store_flags
#define EOL_PARAM_set_request_to_store()            { eol_params_to_store_flags = 1U; }
#define EOL_PARAM_reset_request_to_store()          { eol_params_to_store_flags = 0U; }
#define EOL_PARAM_are_params_to_store()             ( eol_params_to_store_flags != 0U )


// indirizzo del nodo slave LIN a livello di protocollo PDU
extern uint8_t lin_pdu_node_address;


/* ---------------------------------------------------------------------------------------- */
/*  6.  PUBLIC FUNCTION PROTOTYPES ('extern', definition in C source)                       */
/* ---------------------------------------------------------------------------------------- */
void LIN_PDU_PROTOCOL_init(void);
void LIN_PDU_PROTOCOL_task(void);
//void lin_pdu_prepare_response__broadcast(void);

//void lin_pdu_protocol_negative_response(uint8_t node_address_for_response, uint8_t error_code);

// Routine of Diagnostic Services
void lin_pdu_protocol_readDataByLocalIdentifier(void);
void lin_pdu_protocol_writeDataByLocalIdentifier(void);


#endif // LIN_APP_PROTOCOL_H
/* ****************************************************************************************
 *  EOF
 * **************************************************************************************** */
